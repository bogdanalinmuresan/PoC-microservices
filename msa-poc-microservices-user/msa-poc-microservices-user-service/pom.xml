<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <parent>
        <artifactId>msa-poc-microservices-user</artifactId>
        <groupId>msa-poc-microservices</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <modelVersion>4.0.0</modelVersion>
    <artifactId>msa-poc-microservices-user-service</artifactId>
    <name>${project.artifactId}</name>

    <properties>
        <packageClassifier>exec</packageClassifier>
        <mainClass>msa.poc.microservices.user.Application</mainClass>
        <docker.exposePort>8095</docker.exposePort>
    </properties>

    <dependencies>
        <dependency>
            <groupId>msa-poc-microservices</groupId>
            <artifactId>msa-poc-microservices-common</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>msa-poc-microservices</groupId>
            <artifactId>msa-poc-microservices-communication-api</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        
         <dependency>
            <groupId>msa-poc-microservices</groupId>
            <artifactId>msa-poc-microservices-user-api</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <!--- Boot: Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!--- Data: JPA -->
         <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!--- Database: Postgres -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>
        
    	<!-- H2  -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>test</scope>
		</dependency>

        <!--- Cloud: Stream -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream</artifactId>
        </dependency>

        <!--- Cloud: Stream: Kafka (Binder) -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream-binder-kafka</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-sleuth</artifactId>
        </dependency>

         <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
        </dependency> 
        
        <!-- https://mvnrepository.com/artifact/org.springframework.kafka/spring-kafka-test -->
		<dependency>
		    <groupId>org.springframework.kafka</groupId>
		    <artifactId>spring-kafka-test</artifactId>
		</dependency>
        
         <!-- Spock -->
	     <dependency>
		      <groupId>org.spockframework</groupId>
		      <artifactId>spock-core</artifactId>
		      <scope>test</scope>
		</dependency>
		<dependency>
		    <groupId>org.codehaus.groovy</groupId>
		    <artifactId>groovy-all</artifactId>
		    <scope>test</scope>
		</dependency> 
		
		<dependency>
           <groupId>org.spockframework</groupId>
           <artifactId>spock-spring</artifactId>
       </dependency>
       
       <dependency>
           <groupId>org.springframework.boot</groupId>
           <artifactId>spring-boot-starter-test</artifactId>
           <scope>test</scope>
       </dependency>
       
       <!-- This enables any interface (or set of interfaces) to be proxied -->
       <dependency>
            <groupId>cglib</groupId>
            <artifactId>cglib</artifactId>
        </dependency>
       
       <dependency>
           <groupId>com.fasterxml.jackson.core</groupId>
           <artifactId>jackson-databind</artifactId>
       </dependency>
       
		<dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
      
       <!-- model mapper -->
		<dependency>
		<groupId>org.modelmapper</groupId>
		<artifactId>modelmapper</artifactId>
		</dependency>
		
		<!-- Config cloud server -->
		<dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-config-client</artifactId>
        </dependency>

		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
	  	
		<dependency>
		    <groupId>io.jaegertracing</groupId>
		    <artifactId>jaeger-client</artifactId>
		</dependency>
	
		<!-- https://mvnrepository.com/artifact/io.opentracing.contrib/opentracing-spring-web-autoconfigure -->
		<dependency>
		    <groupId>io.opentracing.contrib</groupId>
		    <artifactId>opentracing-spring-web-autoconfigure</artifactId>
		</dependency>

	
		
    </dependencies>

    <build>
        <resources>
            <resource>
                <directory>${project.basedir}/src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.yml</include>
                    <include>**/*.xml</include>
                    <include>**/*.txt</include>
                    <include>**/banner.txt</include>
                </includes>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/docker</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/src/main/docker</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                        <configuration>
                            <classifier>${packageClassifier}</classifier>
                            <executable>true</executable>
                            <mainClass>${mainClass}</mainClass>
                            <outputDirectory>${project.build.directory}/docker</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
	      <!-- plugin to compile Groovy -->
	      <plugin>
			    <groupId>org.codehaus.gmavenplus</groupId>
			    <artifactId>gmavenplus-plugin</artifactId>
			    <version>1.5</version>
			    <executions>
			        <execution>
			            <goals>
			                <goal>compile</goal>
			                <goal>testCompile</goal>
			            </goals>
			        </execution>
			     </executions>
			</plugin>
			
			<!-- Optional plugins for using Spock -->
			<!-- Only required if names of spec classes don't match default Surefire patterns (`*Test` etc.) -->
	 	    <plugin>
               <groupId>org.apache.maven.plugins</groupId>
               <artifactId>maven-surefire-plugin</artifactId>
               <version>2.19</version>
               <configuration>
                   <!-- Include both Java & Groovy tests & specifications -->
                   <includes>
                       <include>**/*Test.*</include>
                       <include>**/*Spec.*</include>
                   </includes>
               </configuration>
          </plugin>       

        </plugins>
    </build>

</project>
